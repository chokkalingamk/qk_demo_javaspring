# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and deploy to Azure Kubernetes Service

env:
  AZURE_CONTAINER_REGISTRY: ecrinsights # set this to the name of your container registry
  PROJECT_NAME: qkinsightsjava              # set this to your project's name
  RESOURCE_GROUP: App_insights_AKS_ck          # set this to the resource group containing your AKS cluster
  CLUSTER_NAME: appinsightsaks              # set this to the name of your AKS cluster
  ACR_REGISTRY_URL: ecrinsights.azurecr.io              # set this to the URL of your registry
  CHART_PATH: "./javasampleapp"
  CHART_OVERRIDE_PATH: "./javasampleapp/values.yaml"
#   # If you bake using helm:
#   CHART_PATH: MY_HELM_FILE                   # set this to the path to your helm file
#   CHART_OVERRIDE_PATH: MY_OVERRIDE_FILES     # set this to an array of override file paths

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs: 
  Build_and_Deploy:
    runs-on: ubuntu-latest
    steps:

    - name: github checkout
      uses: actions/checkout@v3
  
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
    
    - uses: Azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push image to ACR
      run: |
          docker build . -t ${{ env.ACR_REGISTRY_URL }}/qkjavaappdemo:${{ github.sha }} -t ${{ env.ACR_REGISTRY_URL }}/qkjavaappdemo:latest
          #docker push ${{ env.ACR_REGISTRY_URL }}/qkjavaappdemo:${{ github.sha }}
          docker push ${{ env.ACR_REGISTRY_URL }}/qkjavaappdemo --all-tags

    - name: Get K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    - name: Lint Check
      run: helm lint ./javasampleapp

    - name: Set imagePullSecret
      uses: azure/k8s-create-secret@v4
      with:
        container-registry-url: ${{ env.ACR_REGISTRY_URL }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: 'qkjavaappdemo-secret'

    - name: App_insights_docker deployment
      uses: azure/k8s-bake@v2
      with:
        renderEngine: "helm"
        helmChart: ${{ env.CHART_PATH }}
        overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
        overrides: |
          replicas:1
        helm-version: "latest"
      id: bake

    - uses: Azure/k8s-deploy@v1.2
      with:
        action: deploy
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
        images: |
            ${{ env.ACR_REGISTRY_URL }}/qkjavaappdemo:${{ github.sha }}
        imagepullsecrets: |
            qkjavaappdemo-secret
